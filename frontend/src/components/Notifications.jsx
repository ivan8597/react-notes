import React, { useState, useEffect, useRef } from 'react';
import { useNavigate } from 'react-router-dom';
import io from 'socket.io-client';


const notificationStyles = {
  container: {
    position: 'relative',
    display: 'inline-block',
    marginRight: '20px'
  },
  bell: {
    fontSize: '24px',
    cursor: 'pointer',
    position: 'relative'
  },
  badge: {
    position: 'absolute',
    top: '-5px',
    right: '-10px',
    backgroundColor: 'red',
    color: 'white',
    borderRadius: '50%',
    padding: '3px 6px',
    fontSize: '12px'
  },
  dropdown: {
    position: 'absolute',
    top: '30px',
    right: '-15px',
    width: '300px',
    maxHeight: '400px',
    overflowY: 'auto',
    backgroundColor: 'white',
    boxShadow: '0 4px 8px rgba(0,0,0,0.1)',
    borderRadius: '4px',
    zIndex: 1000,
    padding: '10px 0'
  },
  notification: {
    padding: '10px 15px',
    borderBottom: '1px solid #eee',
    cursor: 'pointer'
  },
  notificationTitle: {
    fontWeight: 'bold',
    marginBottom: '5px'
  },
  notificationTime: {
    fontSize: '12px',
    color: '#888'
  },
  unread: {
    backgroundColor: '#f0f7ff'
  },
  noNotifications: {
    padding: '15px',
    textAlign: 'center',
    color: '#888'
  },
  error: {
    color: 'red',
    fontSize: '12px'
  }
};

const Notifications = () => {
  const [notifications, setNotifications] = useState([]);
  const [unreadCount, setUnreadCount] = useState(0);
  const [isOpen, setIsOpen] = useState(false);
  const [socketError, setSocketError] = useState(null);
  const [isConnected, setIsConnected] = useState(false);
  const dropdownRef = useRef(null);
  const navigate = useNavigate();
  
  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Socket.IO –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    console.log('–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Socket.IO —Å–µ—Ä–≤–µ—Ä—É...');
    
    // –û–ø—Ü–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    const socketOptions = {
      withCredentials: true,
      transports: ['websocket', 'polling'], // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º websocket, –ø–æ—Ç–æ–º polling
      reconnectionAttempts: 5, // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      reconnectionDelay: 1000, // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ –≤ –º—Å
      timeout: 20000 // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    };
    
    const socket = io('http://localhost:5001', socketOptions);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    socket.on('connect', () => {
      console.log('Socket.IO –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ, ID:', socket.id);
      setIsConnected(true);
      setSocketError(null);
    });
    
    socket.on('connect_error', (err) => {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Socket.IO:', err.message);
      setSocketError(`–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ${err.message}`);
      setIsConnected(false);
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
    socket.on('newsCreated', (news) => {
      console.log('–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ newsCreated:', news);
      const newNotification = {
        id: Date.now(),
        type: 'created',
        title: news.title,
        message: '–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å—Ç–∞—Ç—å—è',
        newsId: news._id,
        timestamp: new Date(),
        read: false
      };
      setNotifications(prev => [newNotification, ...prev]);
      setUnreadCount(prev => prev + 1);
    });
    
    socket.on('newsUpdated', (news) => {
      console.log('–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ newsUpdated:', news);
      const newNotification = {
        id: Date.now(),
        type: 'updated',
        title: news.title,
        message: '–°—Ç–∞—Ç—å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞',
        newsId: news._id,
        timestamp: new Date(),
        read: false
      };
      setNotifications(prev => [newNotification, ...prev]);
      setUnreadCount(prev => prev + 1);
    });
    
    socket.on('newsDeleted', (data) => {
      console.log('–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ newsDeleted:', data);
      const newNotification = {
        id: Date.now(),
        type: 'deleted',
        message: '–°—Ç–∞—Ç—å—è —É–¥–∞–ª–µ–Ω–∞',
        timestamp: new Date(),
        read: false
      };
      setNotifications(prev => [newNotification, ...prev]);
      setUnreadCount(prev => prev + 1);
    });
    
    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return () => {
      console.log('–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç Socket.IO —Å–µ—Ä–≤–µ—Ä–∞...');
      socket.disconnect();
    };
  }, []);
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –≤–Ω–µ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ –¥–ª—è –µ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
  useEffect(() => {
    function handleClickOutside(event) {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {
        setIsOpen(false);
      }
    }
    
    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, []);
  
  // –û—Ç–∫—Ä—ã—Ç–∏–µ/–∑–∞–∫—Ä—ã—Ç–∏–µ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  const toggleDropdown = () => {
    setIsOpen(!isOpen);
    if (!isOpen && unreadCount > 0) {
      // –ü–æ–º–µ—á–∞–µ–º –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏
      setNotifications(notifications.map(notification => ({ ...notification, read: true })));
      setUnreadCount(0);
    }
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é
  const handleNotificationClick = (notification) => {
    setIsOpen(false);
    
    // –ï—Å–ª–∏ —Å—Ç–∞—Ç—å—è –µ—â—ë —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –Ω–µ–π
    if (notification.type !== 'deleted' && notification.newsId) {
      navigate(`/articles/${notification.newsId}`);
    }
  };
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const formatTime = (timestamp) => {
    const date = new Date(timestamp);
    return date.toLocaleString();
  };
  
  return (
    <div style={notificationStyles.container} ref={dropdownRef}>
      <div style={notificationStyles.bell} onClick={toggleDropdown}>
        <span role="img" aria-label="–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è">
          {isConnected ? 'üîî' : 'üîï'}
        </span>
        {unreadCount > 0 && <div style={notificationStyles.badge}>{unreadCount}</div>}
      </div>
      
      {isOpen && (
        <div style={notificationStyles.dropdown}>
          <h3 style={{ padding: '0 15px', margin: '10px 0' }}>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</h3>
          
          {socketError && (
            <div style={notificationStyles.error}>
              {socketError}
            </div>
          )}
          
          {notifications.length === 0 ? (
            <div style={notificationStyles.noNotifications}>
              {isConnected ? '–ù–µ—Ç –Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π' : '–û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'}
            </div>
          ) : (
            notifications.map(notification => (
              <div 
                key={notification.id}
                style={{
                  ...notificationStyles.notification,
                  ...(notification.read ? {} : notificationStyles.unread)
                }}
                onClick={() => handleNotificationClick(notification)}
              >
                <div style={notificationStyles.notificationTitle}>
                  {notification.title || '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—å–µ'}
                </div>
                <div>{notification.message}</div>
                <div style={notificationStyles.notificationTime}>
                  {formatTime(notification.timestamp)}
                </div>
              </div>
            ))
          )}
        </div>
      )}
    </div>
  );
} 

export default Notifications;